"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsWebsocketApiStack = void 0;
const cdk = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_apigatewayv2_1 = require("aws-cdk-lib/aws-apigatewayv2");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const config = require("../config.json"); // has the region name and aws account id
const region = config.region;
const account_id = config.account_id;
const tableName = "UserList";
const createLambdaFunction = (Construct, name, codePath) => {
    return new aws_lambda_1.Function(Construct, name, {
        code: new aws_lambda_1.AssetCode(codePath),
        handler: "app.handler",
        runtime: aws_lambda_1.Runtime.NODEJS_14_X,
        timeout: aws_cdk_lib_1.Duration.seconds(300),
        memorySize: 256,
        environment: {
            TABLE_NAME: tableName,
        },
    });
};
function createMessageFunction(scope, api, table, tableName, region, account_id) {
    return new aws_lambda_1.Function(scope, 'message-lambda', {
        code: new aws_lambda_1.AssetCode('./sendmessage'),
        handler: 'app.handler',
        runtime: aws_lambda_1.Runtime.NODEJS_14_X,
        timeout: aws_cdk_lib_1.Duration.seconds(300),
        memorySize: 256,
        initialPolicy: [
            new aws_iam_1.PolicyStatement({
                actions: ['execute-api:ManageConnections'],
                resources: [`arn:aws:execute-api:${region}:${account_id}:${api.ref}/*`],
                effect: aws_iam_1.Effect.ALLOW,
            })
        ],
        environment: {
            "TABLE_NAME": tableName,
        }
    });
}
class AwsWebsocketApiStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const name = id + "-api";
        const api = new aws_apigatewayv2_1.CfnApi(this, name, {
            name: "ConnectListApi",
            protocolType: "WEBSOCKET",
            routeSelectionExpression: "$request.body.action",
        });
        const table = new aws_dynamodb_1.Table(this, `${name}-table`, {
            tableName: tableName,
            partitionKey: {
                name: "connectionId",
                type: aws_dynamodb_1.AttributeType.STRING,
            },
            readCapacity: 5,
            writeCapacity: 5,
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY
        });
        const connectFunc = createLambdaFunction(this, "connect-lambda", "./onconnect");
        const disconnectFunc = createLambdaFunction(this, "disconnect-lambda", "./ondisconnect");
        const messageFunc = createMessageFunction(this, api, table, tableName, region, account_id);
        table.grantReadWriteData(connectFunc);
        table.grantReadWriteData(disconnectFunc);
        table.grantReadWriteData(messageFunc);
        // access role for the socket api to access the socket lambda
        const policy = new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            resources: [
                connectFunc.functionArn,
                disconnectFunc.functionArn,
                messageFunc.functionArn
            ],
            actions: ["lambda:InvokeFunction"]
        });
        const role = new aws_iam_1.Role(this, `${name}-iam-role`, {
            assumedBy: new aws_iam_1.ServicePrincipal("apigateway.amazonaws.com")
        });
        role.addToPolicy(policy);
        function createLambdaIntegration(scope, api, functionName, functionArn, roleArn) {
            return new aws_apigatewayv2_1.CfnIntegration(scope, `${functionName}-lambda-integration`, {
                apiId: api.ref,
                integrationType: "AWS_PROXY",
                integrationUri: `arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${functionArn}/invocations`,
                credentialsArn: roleArn,
            });
        }
        const connectIntegration = createLambdaIntegration(this, api, "connect", connectFunc.functionArn, role.roleArn);
        const disconnectIntegration = createLambdaIntegration(this, api, "disconnect", disconnectFunc.functionArn, role.roleArn);
        const messageIntegration = createLambdaIntegration(this, api, "sendmessage", messageFunc.functionArn, role.roleArn);
        function createRoute(scope, api, routeKey, integration) {
            return new aws_apigatewayv2_1.CfnRoute(scope, `${routeKey}-route`, {
                apiId: api.ref,
                routeKey: routeKey,
                authorizationType: "NONE",
                target: `integrations/${integration.ref}`,
            });
        }
        const connectRoute = createRoute(this, api, "$connect", connectIntegration);
        const disconnectRoute = createRoute(this, api, "$disconnect", disconnectIntegration);
        const messageRoute = createRoute(this, api, "sendmessage", messageIntegration);
        const deployment = new aws_apigatewayv2_1.CfnDeployment(this, `${name}-deployment`, {
            apiId: api.ref
        });
        new aws_apigatewayv2_1.CfnStage(this, `${name}-stage`, {
            apiId: api.ref,
            autoDeploy: true,
            deploymentId: deployment.ref,
            stageName: "dev"
        });
        deployment.node.addDependency(connectRoute);
        deployment.node.addDependency(disconnectRoute);
        deployment.node.addDependency(messageRoute);
    }
}
exports.AwsWebsocketApiStack = AwsWebsocketApiStack;
const app = new aws_cdk_lib_1.App();
new AwsWebsocketApiStack(app, `chat-app`);
app.synth();
//# sourceMappingURL=data:application/json;base64,